üß± T·ªïng quan setup
Vai tr√≤	Hostname	IP (v√≠ d·ª•)
Master	k8s-master	192.168.0.100
Worker1	k8s-node1	192.168.0.101
Worker2	k8s-node2	192.168.0.102

üëâ C·∫£ 3 m√°y ƒë·ªÅu l√† Ubuntu Server 22.04/24.04 (ƒë·ªÅ xu·∫•t).

üß∞ 1Ô∏è‚É£ Chu·∫©n b·ªã m√¥i tr∆∞·ªùng tr√™n c·∫£ 3 node
1. C·∫≠p nh·∫≠t h·ªá th·ªëng
sudo apt update && sudo apt upgrade -y

2. T·∫Øt swap (b·∫Øt bu·ªôc cho K8s)
sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab

3. C√†i container runtime (containerd)
sudo apt install -y containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd

4. B·∫≠t c√°c module kernel c·∫ßn thi·∫øt
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

5. C·∫•u h√¨nh sysctl cho K8s
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system

üß© 2Ô∏è‚É£ C√†i ƒë·∫∑t K8s tools: kubeadm, kubelet, kubectl

Tr√™n t·∫•t c·∫£ c√°c node (master + worker):

sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | \
sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] \
https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | \
sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


Ki·ªÉm tra:

kubeadm version

üöÄ 3Ô∏è‚É£ Kh·ªüi t·∫°o cluster tr√™n Master

Tr√™n master node (192.168.0.100):

sudo kubeadm init --pod-network-cidr=192.168.0.0/16


‚ö†Ô∏è Tham s·ªë --pod-network-cidr c·∫ßn kh·ªõp v·ªõi plugin m·∫°ng (Calico d√πng 192.168.0.0/16, Flannel d√πng 10.244.0.0/16).

N·∫øu th√†nh c√¥ng, b·∫°n s·∫Ω th·∫•y output ki·ªÉu nh∆∞:

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Then you can join any number of worker nodes by running the following on each as root:

  kubeadm join 192.168.0.100:6443 --token abcdef.0123456789abcdef \
    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxx


Ch·∫°y ƒë√∫ng 3 d√≤ng ƒë·∫ßu:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

üåê 4Ô∏è‚É£ C√†i ƒë·∫∑t m·∫°ng cho pod (CNI Plugin)

C√†i Calico (r·∫•t ph·ªï bi·∫øn, ·ªïn ƒë·ªãnh):

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/calico.yaml


Ki·ªÉm tra:

kubectl get pods -n kube-system


Khi t·∫•t c·∫£ ƒë·ªÅu Running ‚Üí OK ‚úÖ

ü§ù 5Ô∏è‚É£ Th√™m worker node v√†o cluster

Tr√™n m·ªói worker node, ch·∫°y l·ªánh join m√† master ƒë√£ in ra, v√≠ d·ª•:

sudo kubeadm join 192.168.0.100:6443 --token abcdef.0123456789abcdef \
    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxx


N·∫øu b·∫°n qu√™n token, c√≥ th·ªÉ t·∫°o l·∫°i tr√™n master:

kubeadm token create --print-join-command

üîç 6Ô∏è‚É£ Ki·ªÉm tra cluster t·ª´ master

Tr√™n master:

kubectl get nodes


K·∫øt qu·∫£ mong ƒë·ª£i:

NAME           STATUS   ROLES           AGE     VERSION
k8s-master     Ready    control-plane   10m     v1.30.x
k8s-node1      Ready    <none>          5m      v1.30.x
k8s-node2      Ready    <none>          5m      v1.30.x

‚ö° 7Ô∏è‚É£ Test nhanh

Ch·∫°y 1 deployment th·ª≠:

kubectl create deployment nginx --image=nginx
kubectl expose deployment nginx --port=80 --type=NodePort
kubectl get svc


Truy c·∫≠p b·∫±ng tr√¨nh duy·ªát:
http://<IP_node_worker>:<nodePort>

üîß 8Ô∏è‚É£ (Tu·ª≥ ch·ªçn) ‚Äì N·∫øu mu·ªën reset l·∫°i cluster

Tr√™n t·∫•t c·∫£ node:

sudo kubeadm reset -f
sudo rm -rf ~/.kube
sudo systemctl restart containerd

‚úÖ T√≥m t·∫Øt nhanh
B∆∞·ªõc	L√†m g√¨	Tr√™n node
1	C√†i containerd + t·∫Øt swap	Master + Worker
2	C√†i kubeadm/kubectl/kubelet	Master + Worker
3	kubeadm init	Master
4	apply Calico	Master
5	kubeadm join	Worker
6	Ki·ªÉm tra kubectl get nodes	Master

N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ vi·∫øt script auto setup 3 node (master + 2 worker) ch·ªâ c·∫ßn ch·∫°y 1 l·ªánh copy-paste (gi√∫p ti·∫øt ki·ªám th·ªùi gian test) ‚Äî b·∫°n mu·ªën m√¨nh t·∫°o lu√¥n kh√¥ng?