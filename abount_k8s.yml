Gi·ªõi thi·ªáu Kubernetes (K8s)

Kubernetes (K8s) l√† m·ªôt h·ªá th·ªëng qu·∫£n l√Ω container m√£ ngu·ªìn m·ªü do Google ph√°t tri·ªÉn, hi·ªán nay ƒë∆∞·ª£c Cloud Native Computing Foundation (CNCF) duy tr√¨. Kubernetes gi√∫p tri·ªÉn khai, qu·∫£n l√Ω, m·ªü r·ªông v√† v·∫≠n h√†nh ·ª©ng d·ª•ng container m·ªôt c√°ch t·ª± ƒë·ªông.

Ng√¥n ng·ªØ vi·∫øt: Go (Golang)

Container runtime: Kubernetes th∆∞·ªùng s·ª≠ d·ª•ng containerd (ho·∫∑c c√°c runtime kh√°c nh∆∞ CRI-O, Docker) ƒë·ªÉ ch·∫°y c√°c container.

1. Ki·∫øn tr√∫c c∆° b·∫£n

Kubernetes c√≥ ki·∫øn tr√∫c Master-Worker:

a. Node

Control-plane node (Master node):

Ch·ªãu tr√°ch nhi·ªám qu·∫£n l√Ω cluster, quy·∫øt ƒë·ªãnh scheduler, maintain tr·∫°ng th√°i cluster.

Ch·∫°y c√°c pod h·ªá th·ªëng nh∆∞:

kube-apiserver

kube-controller-manager

kube-scheduler

etcd (l∆∞u tr·∫°ng th√°i cluster)

Worker node:

Ch·∫°y workloads (pod ·ª©ng d·ª•ng).

Ch·∫°y c√°c pod system h·ªó tr·ª£ nh∆∞ kube-proxy, coredns, calico-node (CNI).

B·∫°n c√≥ th·ªÉ xem tr·∫°ng th√°i c√°c node b·∫±ng l·ªánh:

kubectl get nodes


Output v√≠ d·ª•:

NAME       STATUS   ROLES           AGE     VERSION
ubuntu3    Ready    control-plane   6m44s   v1.31.13
ubuntu22   Ready    <none>          4m27s   v1.32.9

b. Pod

Pod l√† ƒë∆°n v·ªã tri·ªÉn khai c∆° b·∫£n trong Kubernetes, ch·ª©a m·ªôt ho·∫∑c nhi·ªÅu container ch·∫°y c√πng namespace m·∫°ng, volume, config.

C√°c lo·∫°i pod ph·ªï bi·∫øn:

Application pod: ch·ª©a container ·ª©ng d·ª•ng c·ªßa b·∫°n

System pod: pod ph·ª•c v·ª• cluster, v√≠ d·ª• coredns, kube-proxy, calico-node

Xem pod ƒëang ch·∫°y:

kubectl get pods -n kube-system


Output v√≠ d·ª•:

NAME                                       READY   STATUS    AGE
calico-node-xxrhd                          1/1     Running   5m
coredns-7c65d6cfc9-vk8m6                   1/1     Running   6m

c. Service

Service gi√∫p k·∫øt n·ªëi c√°c pod v·ªõi nhau v√† v·ªõi b√™n ngo√†i cluster.

V√≠ d·ª•: ClusterIP, NodePort, LoadBalancer.

d. Networking

Kubernetes t·∫°o m·ªôt m·∫°ng ri√™ng cho pod:

M·ªói pod c√≥ IP ri√™ng, c√≥ th·ªÉ giao ti·∫øp tr·ª±c ti·∫øp v·ªõi pod kh√°c trong cluster (gi·ªëng LAN).

C√°c layer network:

Layer 3: IP routing gi·ªØa pod v√† node

Layer 7: Service, Ingress ƒë·ªÉ ƒë·ªãnh tuy·∫øn HTTP/HTTPS, gi·ªëng nh∆∞ reverse proxy

Control-plane node gi·ªëng nh∆∞ router / switch ƒëi·ªÅu ph·ªëi traffic v√† quy·∫øt ƒë·ªãnh pod ch·∫°y ·ªü node n√†o.

C√°c m·∫°ng trong K8s th∆∞·ªùng tri·ªÉn khai qua CNI plugins nh∆∞ Calico, Flannel, Weave.

e. C·∫•u h√¨nh & tri·ªÉn khai

Kubernetes d√πng file YAML ƒë·ªÉ m√¥ t·∫£ c·∫•u h√¨nh:

Pod, Deployment, Service, ConfigMap, Ingress...

V√≠ d·ª• tri·ªÉn khai m·ªôt pod:

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80


√Åp d·ª•ng b·∫±ng l·ªánh:

kubectl apply -f pod.yaml

f. T·ªïng quan ho·∫°t ƒë·ªông

Ng∆∞·ªùi d√πng vi·∫øt file YAML ‚Üí apply l√™n cluster

kube-apiserver nh·∫≠n request ‚Üí l∆∞u v√†o etcd

scheduler quy·∫øt ƒë·ªãnh pod ch·∫°y tr√™n node n√†o

Node th·ª±c thi container qua containerd

Service v√† Ingress ƒë·ªãnh tuy·∫øn traffic gi·ªØa pod ho·∫∑c ra ngo√†i

üí° T√≥m t·∫Øt:

Kubernetes l√† h·ªá th·ªëng qu·∫£n l√Ω container, d√πng container runtime (containerd, Docker).

Ki·∫øn tr√∫c: Control-plane + Worker node

Th√†nh ph·∫ßn ch√≠nh: Pod, Service, Deployment, ConfigMap, Ingress

M·∫°ng pod ri√™ng bi·ªát, layer3 routing, layer7 service/ingress.

C·∫•u h√¨nh b·∫±ng YAML.



1. Workload resources (li√™n quan ƒë·∫øn ch·∫°y ·ª©ng d·ª•ng)

ReplicaSet: ƒë·∫£m b·∫£o s·ªë l∆∞·ª£ng pod ch·∫°y theo mong mu·ªën

StatefulSet: ch·∫°y pod c√≥ state (d·ªØ li·ªáu l∆∞u persistent, t√™n pod c·ªë ƒë·ªãnh)

DaemonSet: ch·∫°y m·ªôt pod tr√™n m·ªçi node ho·∫∑c c√°c node theo label selector

Job: ch·∫°y pod m·ªôt l·∫ßn, ho√†n th√†nh l√† k·∫øt th√∫c

CronJob: ch·∫°y pod theo l·ªãch ƒë·ªãnh s·∫µn (gi·ªëng cron)

ReplicationController: t∆∞∆°ng t·ª± ReplicaSet (√≠t d√πng hi·ªán nay)

2. Configuration & Storage

Secret: l∆∞u th√¥ng tin nh·∫°y c·∫£m (password, token, key)

PersistentVolume (PV): ƒë·ªãnh nghƒ©a storage tr√™n cluster

PersistentVolumeClaim (PVC): y√™u c·∫ßu storage t·ª´ PV

StorageClass: ch√≠nh s√°ch c·∫•p ph√°t storage ƒë·ªông

3. Networking & Exposure

Ingress: ƒë·ªãnh tuy·∫øn HTTP/HTTPS t·ª´ ngo√†i v√†o cluster

NetworkPolicy: quy ƒë·ªãnh lu·ªìng traffic gi·ªØa pod

Service: ClusterIP, NodePort, LoadBalancer, ExternalName

4. Cluster-level / Meta

Namespace: chia cluster th√†nh nhi·ªÅu m√¥i tr∆∞·ªùng/nh√≥m

ResourceQuota: gi·ªõi h·∫°n t√†i nguy√™n cho namespace

LimitRange: gi·ªõi h·∫°n resource cho pod/container

Role / ClusterRole & RoleBinding / ClusterRoleBinding: qu·∫£n l√Ω quy·ªÅn truy c·∫≠p

ServiceAccount: t√†i kho·∫£n pod d√πng ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi API

5. Custom Resource

CustomResourceDefinition (CRD): cho ph√©p t·∫°o resource ri√™ng ngo√†i c√°c resource m·∫∑c ƒë·ªãnh c·ªßa K8s

V√≠ d·ª•: Prometheus, ArgoCD, ho·∫∑c c√°c operator kh√°c s·∫Ω ƒë·ªãnh nghƒ©a CRD.


| **Resource**                         | **Ch·ª©c nƒÉng**                                      | **V√≠ d·ª• YAML ng·∫Øn**                                                                                                                                                                                                                                                             |
| ------------------------------------ | -------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Pod**                              | ƒê∆°n v·ªã ch·∫°y container c∆° b·∫£n                       | `yaml apiVersion: v1 kind: Pod metadata: name: nginx-pod spec: containers: - name: nginx image: nginx:latest`                                                                                                                                                                   |
| **Deployment**                       | Qu·∫£n l√Ω nhi·ªÅu replica pod, auto update             | `yaml apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploy spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:latest`                                                         |
| **ReplicaSet**                       | ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng pod ch·∫°y theo mong mu·ªën           | `yaml apiVersion: apps/v1 kind: ReplicaSet metadata: name: nginx-rs spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:latest`                                                             |
| **StatefulSet**                      | Pod c√≥ state, t√™n c·ªë ƒë·ªãnh, d√πng storage persistent | `yaml apiVersion: apps/v1 kind: StatefulSet metadata: name: mysql spec: serviceName: "mysql" replicas: 1 selector: matchLabels: app: mysql template: metadata: labels: app: mysql spec: containers: - name: mysql image: mysql:8`                                               |
| **DaemonSet**                        | Ch·∫°y pod tr√™n m·ªçi node ho·∫∑c node ch·ªçn l·ªçc          | `yaml apiVersion: apps/v1 kind: DaemonSet metadata: name: calico spec: selector: matchLabels: app: calico template: metadata: labels: app: calico spec: containers: - name: calico-node image: calico/node`                                                                     |
| **Job**                              | Ch·∫°y pod 1 l·∫ßn                                     | `yaml apiVersion: batch/v1 kind: Job metadata: name: backup spec: template: spec: containers: - name: backup image: busybox command: ["echo", "backup"] restartPolicy: Never`                                                                                                   |
| **CronJob**                          | Ch·∫°y job theo l·ªãch                                 | `yaml apiVersion: batch/v1 kind: CronJob metadata: name: hello spec: schedule: "*/1 * * * *" jobTemplate: spec: template: spec: containers: - name: hello image: busybox command: ["echo","Hello"] restartPolicy: OnFailure`                                                    |
| **Service**                          | K·∫øt n·ªëi pod, expose ra ngo√†i                       | `yaml apiVersion: v1 kind: Service metadata: name: nginx-svc spec: selector: app: nginx ports: - port: 80 targetPort: 80 type: ClusterIP`                                                                                                                                       |
| **Ingress**                          | ƒê·ªãnh tuy·∫øn HTTP/HTTPS                              | `yaml apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: web-ingress spec: rules: - host: example.com http: paths: - path: / backend: service: name: nginx-svc port: number: 80`                                                                                    |
| **ConfigMap**                        | L∆∞u config kh√¥ng nh·∫°y c·∫£m                          | `yaml apiVersion: v1 kind: ConfigMap metadata: name: app-config data: key1: value1 key2: value2`                                                                                                                                                                                |
| **Secret**                           | L∆∞u d·ªØ li·ªáu nh·∫°y c·∫£m                               | `yaml apiVersion: v1 kind: Secret metadata: name: db-secret type: Opaque data: password: cGFzc3dvcmQ=`                                                                                                                                                                          |
| **PersistentVolume (PV)**            | ƒê·ªãnh nghƒ©a storage                                 | `yaml apiVersion: v1 kind: PersistentVolume metadata: name: pv-data spec: capacity: storage: 1Gi accessModes: [ReadWriteOnce] hostPath: path: /data`                                                                                                                            |
| **PersistentVolumeClaim (PVC)**      | Y√™u c·∫ßu storage t·ª´ PV                              | `yaml apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-data spec: accessModes: [ReadWriteOnce] resources: requests: storage: 1Gi`                                                                                                                                 |
| **Namespace**                        | Chia cluster theo m√¥i tr∆∞·ªùng ho·∫∑c nh√≥m             | `yaml apiVersion: v1 kind: Namespace metadata: name: dev`                                                                                                                                                                                                                       |
| **NetworkPolicy**                    | Quy ƒë·ªãnh lu·ªìng traffic gi·ªØa pod                    | `yaml apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: allow-nginx spec: podSelector: matchLabels: app: nginx policyTypes: - Ingress`                                                                                                                       |
| **Role / ClusterRole**               | Quy·ªÅn truy c·∫≠p trong cluster                       | `yaml apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: pod-reader rules: - apiGroups: [""] resources: ["pods"] verbs: ["get","watch","list"]`                                                                                                                |
| **RoleBinding / ClusterRoleBinding** | G√°n Role/ClusterRole cho user/serviceaccount       | `yaml apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: read-pods-binding subjects: - kind: User name: alice namespace: default roleRef: kind: Role name: pod-reader apiGroup: rbac.authorization.k8s.io`                                              |
| **CustomResourceDefinition (CRD)**   | T·∫°o resource ri√™ng ngo√†i K8s m·∫∑c ƒë·ªãnh              | `yaml apiVersion: apiextensions.k8s.io/v1 kind: CustomResourceDefinition metadata: name: crontabs.stable.example.com spec: group: stable.example.com versions: - name: v1 served: true storage: true scope: Namespaced names: plural: crontabs singular: crontab kind: CronTab` |


üí° Ghi ch√∫ nhanh:

Workload resources ‚Üí ch·∫°y ·ª©ng d·ª•ng: Pod, Deployment, ReplicaSet, StatefulSet, DaemonSet, Job, CronJob

Config/Secrets ‚Üí c·∫•u h√¨nh ·ª©ng d·ª•ng: ConfigMap, Secret, PVC, PV

Networking ‚Üí k·∫øt n·ªëi pod: Service, Ingress, NetworkPolicy

Qu·∫£n l√Ω quy·ªÅn ‚Üí Role, ClusterRole, RoleBinding, ClusterRoleBinding

Qu·∫£n l√Ω cluster ‚Üí Namespace, CRD